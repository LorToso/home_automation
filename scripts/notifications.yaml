send_notification:
  alias: Send Notification
  fields:
    title:
      description: "Title"
      example: "Message title"
    message:
      description: "Message"
      example: "This is a test message"
    link:
      description: "Link"
      example: "/room-overview/bath-room-"
      default: ""
  sequence:
    - service: notify.lg_webos_tv_oled65c27la
      data_template:
        title: "{{ title }}"
        message: "{{ message }}"
    - service: notify.mobile_app_p30
      data_template:
        title: "{{ title }}"
        message: "{{ message }}"
        data:
          # Android URL
          clickAction: "{{ url }}"
    - service: notify.mobile_app_iphone_de_nina
      data_template:
        title: "{{ title }}"
        message: "{{ message }}"
        data:
          # iOS URL
          url: "{{ url }}"
  mode: single

send_maintenance_notification:
  alias: Send Maintenence Notification
  fields:
    title:
      description: "Title"
      example: "Message title"
    message:
      description: "Message"
      example: "This is a test message"
    link:
      description: "Link"
      example: "/room-overview/bath-room-"
      default: ""
  sequence:
    - service: notify.lg_webos_tv_oled65c27la
      data_template:
        title: "{{ title }}"
        message: "{{ message }}"
    - service: notify.mobile_app_p30
      data_template:
        title: "{{ title }}"
        message: "{{ message }}"
        data:
          # Android URL
          clickAction: "{{ url }}"
  mode: single

send_air_freshness_notification:
  alias: Send Air Freshness Notification
  fields:
    title:
      description: Title
      example: Message title
    message:
      description: Message
      example: This is a test message
    link:
      description: Link
      example: /room-overview/bath-room-
      default: ""
  sequence:
    - service: notify.lg_webos_tv_oled65c27la
      data_template:
        title: "{{ title }}"
        message: "{{ message }}"
    - if:
        - condition: zone
          entity_id: person.lorenzo
          zone: zone.home
      then:
        - service: notify.mobile_app_p30
          data_template:
            title: "{{ title }}"
            message: "{{ message }}"
            data:
              clickAction: "{{ url }}"
    - if:
        - condition: zone
          entity_id: person.nina
          zone: zone.home
      then:
        - service: notify.mobile_app_iphone_de_nina
          data_template:
            title: "{{ title }}"
            message: "{{ message }}"
            data:
              url: "{{ url }}"
  mode: single

send_daily_update_notification:
  alias: Send daily update notification
  sequence:
    - service: conversation.process
      data:
        language: EN
        agent_id: 0b4adba265f056c33e7b360f0f6af6f1
        conversation_id: 01HZN7C2SSFD6A3PRTWHX08AH9
        text: >-
          Write a nice short motivating message that the user receives at the start of the day.
          At most 20 words.
          Mix it up if I ask you multiple times.
      response_variable: chatgpt_output
    - service: telegram_bot.send_message
      data:
        target: 326651817
        message: |
          *Daily update*
          {{chatgpt_output["response"]["speech"]["plain"]["speech"]}}

          *Air freshness:*
          {%- if states("binary_sensor.is_all_air_fresh") == "on" %}
          ✅ All good! Great job!
          {%- endif %}
          {%- if states("binary_sensor.is_office_air_fresh") == "off" %}
          💻 Office needs to be aired!
          {%- endif %}
          {%- if states("binary_sensor.is_bath_room_air_fresh") == "off" %}
          💧 Bath Room needs to be aired!
          {%- endif %}
          {%- if states("binary_sensor.is_living_room_air_fresh") == "off" %}
          🛋️ Living Room needs to be aired!
          {%- endif %}
          {%- if states("binary_sensor.is_bed_room_air_fresh") == "off" %}
          🛏️ Bed Room needs to be aired!
          {%- endif %}

          *Vacuum:*
          {%- if states("binary_sensor.vacuum_problems") == "off" %}
          ✅ Henry has everything he needs!
          {%- endif %}
          {%- if states("binary_sensor.roborock_s7_water_shortage") == "on" %}
          💧 Henry needs water
          {%- endif %}
          {%- if states("sensor.roborock_s7_dock_error") == "Error" %}
          🗑️ Henrys dust bin needs to be emptied.
          {%- endif %}

          *Rooms that need vacuuming:*
          {%- if (states("sensor.bed_room_vacuumed_days_ago")|int) > 3 %}
          🛏 Bed room:     {{ states("sensor.bed_room_vacuumed_days_ago") }} days ago
          {%- endif %}
          {%- if (states("sensor.kitchen_vacuumed_days_ago")|int) > 3 %}
          🍲 Kitchen:     {{ states("sensor.kitchen_vacuumed_days_ago") }} days ago
          {%- endif %}
          {%- if (states("sensor.bar_vacuumed_days_ago")|int) > 3 %}
          🍺 Bar:               {{ states("sensor.bar_vacuumed_days_ago") }} days ago
          {%- endif %}
          {%- if (states("sensor.toilet_vacuumed_days_ago")|int) > 3 %}
          🚽 Toilet:            {{ states("sensor.toilet_vacuumed_days_ago") }} days ago
          {%- endif %}
          {%- if (states("sensor.dining_room_vacuumed_days_ago")|int) > 3 %}
          🍽️ Dining room: {{ states("sensor.dining_room_vacuumed_days_ago") }} days ago
          {%- endif %}
          {%- if (states("sensor.living_room_vacuumed_days_ago")|int) > 3 %}
          🛋️️ Living room:  {{ states("sensor.living_room_vacuumed_days_ago") }} days ago
          {%- endif %}
          {%- if (states("sensor.hallway_vacuumed_days_ago")|int) > 3 %}
          🚶‍♀️ Hallway:        {{ states("sensor.hallway_vacuumed_days_ago") }} days ago
          {%- endif %}
          {%- if (states("sensor.bath_room_vacuumed_days_ago")|int) > 3 %}
          🛁 Bath room:   {{ states("sensor.bath_room_vacuumed_days_ago") }} days ago
          {%- endif %}
          {%- if (states("sensor.office_vacuumed_days_ago")|int) > 3 %}
          💻 Office:           {{ states("sensor.office_vacuumed_days_ago") }} days ago
          {%- endif %}

          *Weather today:*
          **⛅: {{ states("weather.home") }}
          **🌡️: {%- if states("sensor.temperature_today_min")|round == states("sensor.temperature_today_max")|round %}
           {{- states("sensor.temperature_today_min")|round }}°C
          {%- else %}
           {{- states("sensor.temperature_today_min")|round }} - {{ states("sensor.temperature_today_max")|round }}°C
          {%- endif %}
          **☔: {{ states("sensor.total_rain_today") }} mm
          **🍃: {{ states("sensor.max_wind_speed_today") }} km/h
          **🌅: {{ as_timestamp(states("sensor.sun_next_rising")) | timestamp_custom('%H:%m') }} h
          **🌇: {{ as_timestamp(states("sensor.sun_next_setting")) | timestamp_custom('%H:%m') }} h

          {% if states("binary_sensor.has_any_room_not_been_vacuumed") == "on" %}
          ⬇️ Use a button below to send the vacuum to a room
          {% endif %}
        inline_keyboard: |
            {%- set ns = namespace(
            results=[],
            rooms_added=0
            ) %}
            {%- for room in state_attr("sensor.rooms_that_need_to_be_vacuumed", "rooms") %}
            {%- set ns.results = ns.results + [[room, "/" + room]] %}
            {%- set ns.rooms_added = ns.rooms_added + 1 %}
            {%- endfor %}
            [{{- ns.results[:3] }}, {{- ns.results[3:6] }}, {{- ns.results[6:] }}]

  mode: single
