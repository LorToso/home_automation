send_notification:
  alias: Send Notification
  fields:
    title:
      description: "Title"
      example: "Message title"
    message:
      description: "Message"
      example: "This is a test message"
    link:
      description: "Link"
      example: "/room-overview/bath-room-"
      default: ""
  sequence:
    - service: notify.lg_webos_tv_oled65c27la
      data_template:
        title: "{{ title }}"
        message: "{{ message }}"
    - service: notify.mobile_app_p30
      data_template:
        title: "{{ title }}"
        message: "{{ message }}"
        data:
          # Android URL
          clickAction: "{{ url }}"
    - service: notify.mobile_app_iphone_de_nina
      data_template:
        title: "{{ title }}"
        message: "{{ message }}"
        data:
          # iOS URL
          url: "{{ url }}"
  mode: single

send_maintenance_notification:
  alias: Send Maintenence Notification
  fields:
    title:
      description: "Title"
      example: "Message title"
    message:
      description: "Message"
      example: "This is a test message"
    link:
      description: "Link"
      example: "/room-overview/bath-room-"
      default: ""
  sequence:
    - service: notify.lg_webos_tv_oled65c27la
      data_template:
        title: "{{ title }}"
        message: "{{ message }}"
    - service: notify.mobile_app_p30
      data_template:
        title: "{{ title }}"
        message: "{{ message }}"
        data:
          # Android URL
          clickAction: "{{ url }}"
  mode: single

send_air_freshness_notification:
  alias: Send Air Freshness Notification
  fields:
    title:
      description: Title
      example: Message title
    message:
      description: Message
      example: This is a test message
    link:
      description: Link
      example: /room-overview/bath-room-
      default: ""
  sequence:
    - service: notify.lg_webos_tv_oled65c27la
      data_template:
        title: "{{ title }}"
        message: "{{ message }}"
    - if:
        - condition: zone
          entity_id: person.lorenzo
          zone: zone.home
      then:
        - service: notify.mobile_app_p30
          data_template:
            title: "{{ title }}"
            message: "{{ message }}"
            data:
              clickAction: "{{ url }}"
    - if:
        - condition: zone
          entity_id: person.nina
          zone: zone.home
      then:
        - service: notify.mobile_app_iphone_de_nina
          data_template:
            title: "{{ title }}"
            message: "{{ message }}"
            data:
              url: "{{ url }}"
  mode: single

send_daily_update_notification:
  alias: Send daily update notification
  sequence:
    - service: notify.telegram
      data:
        message: |
          *Daily update*

          *Air freshness:*
          {%- if states("binary_sensor.is_all_air_fresh") == "on" %}
          ✅ All good! Great job!
          {% endif %}
          {%- if states("binary_sensor.is_office_air_fresh") == "off" %}
          💻 Office needs to be aired!
          {% endif %}
          {%- if states("binary_sensor.is_bath_room_air_fresh") == "off" %}
          💧 Bath Room needs to be aired!
          {% endif %}
          {%- if states("binary_sensor.is_living_room_air_fresh") == "off" %}
          🛋️ Living Room needs to be aired!
          {% endif %}
          {%- if states("binary_sensor.is_bed_room_air_fresh") == "off" %}
          🛏️ Bed Room needs to be aired!
          {% endif %}
          *Vacuum:*
          {%- if states("binary_sensor.vacuum_problems") == "off" %}
          ✅ Henry has everything he needs!
          {% endif %}
          {%- if states("binary_sensor.roborock_s7_water_shortage") == "on" %}
          💧 Henry needs water
          {% endif %}
          {%- if states("sensor.roborock_s7_dock_error") == "Error" %}
          🗑️ Henrys dust bin needs to be emptied.
          {% endif %}
          {%- if (states("sensor.bed_room_vacuumed_days_ago")|int) > 3 %}
          🛏 Bed room was last vacuumed {{ states("sensor.bed_room_vacuumed_days_ago") }} days ago
          {%endif%}
          {%- if (states("sensor.kitchen_vacuumed_days_ago")|int) > 3 %}
          🍲 Kitchen was last vacuumed {{ states("sensor.kitchen_vacuumed_days_ago") }} days ago
          {%endif%}
          {%- if (states("sensor.bar_vacuumed_days_ago")|int) > 3 %}
          🍺 Bar was last vacuumed {{ states("sensor.bar_vacuumed_days_ago") }} days ago
          {%endif%}
          {%- if (states("sensor.toilet_vacuumed_days_ago")|int) > 3 %}
          🚽 Toilet was last vacuumed {{ states("sensor.toilet_vacuumed_days_ago") }} days ago
          {%endif%}
          {%- if (states("sensor.dining_room_vacuumed_days_ago")|int) > 3 %}
          🍽️ Dining room was last vacuumed {{ states("sensor.dining_room_vacuumed_days_ago") }} days ago
          {%endif%}
          {%- if (states("sensor.living_room_vacuumed_days_ago")|int) > 3 %}
          🛋️️ Living room was last vacuumed {{ states("sensor.living_room_vacuumed_days_ago") }} days ago
          {%endif%}
          {%- if (states("sensor.hallway_room_vacuumed_days_ago")|int) > 3 %}
          Hallway was last vacuumed {{ states("sensor.hallway_room_vacuumed_days_ago") }} days ago
          {%endif%}
          {%- if (states("sensor.bath_room_vacuumed_days_ago")|int) > 3 %}
          🛁 Bath room was last vacuumed {{ states("sensor.bath_room_vacuumed_days_ago") }} days ago
          {%endif%}
          {%- if (states("sensor.office_vacuumed_days_ago")|int) > 3 %}
          💻 Office was last vacuumed {{ states("sensor.office_vacuumed_days_ago") }} days ago
          {%endif%}
          *Weather today:*
          **⛅: {{ states("weather.home") }}
          **🌡️: {%- if states("sensor.temperature_today_min")|round == states("sensor.temperature_today_max")|round %}
           {{- states("sensor.temperature_today_min")|round }}°C
          {%- else %}
           {{- states("sensor.temperature_today_min")|round }} - {{ states("sensor.temperature_today_max")|round }}°C
          {%- endif %}
          **☔: {{ states("sensor.total_rain_today") }} mm
          **🍃: {{ states("sensor.max_wind_speed_today") }} km/h
  mode: single
