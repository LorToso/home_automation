toggle_speaker_grouping:
  alias: Toggle speaker grouping
  fields:
    room:
      name: Room
      description: "Speaker to toggle grouping for"
      example: "bath_room"
      required: true
  variables:
    speaker: "media_player.{{ room }}_speaker"
    group_boolean: "binary_sensor.{{ room }}_speaker_in_group"
  sequence:
  - choose:
    - conditions:
      - condition: template
        value_template: "{{ states(group_boolean) == 'off' }}"
      sequence:
      - service: script.speaker_join_group
        data_template:
          speaker: "{{ speaker }}"
    default:
    - service: media_player.unjoin
      target:
        entity_id: "{{ speaker }}"
  mode: queued

speaker_join_group:
  alias: Speaker join group
  fields:
    room:
      name: Room
      description: "Speaker to toggle grouping for"
      example: "bath_room"
    speaker:
      name: Speaker
      description: "Speaker to toggle grouping for"
      example: "media_player.bath_room_speaker"
  variables:
    speaker: >-
      {% if speaker is defined %}
      {{ speaker }}
      {% else %}
      media_player.{{ room }}_speaker
      {% endif %}
  sequence:
  - choose:
    - conditions:
      - condition: template
        value_template: "{{ speaker != 'media_player.bath_room_speaker' and states('binary_sensor.bath_room_speaker_group_leader') == 'on' }}"
      sequence:
      - service: media_player.join
        data_template:
          group_members: "{{ [speaker] }}"
        target:
          entity_id: media_player.bath_room_speaker

    - conditions:
      - condition: template
        value_template: "{{ speaker != 'media_player.living_room_speaker' and states('binary_sensor.living_room_speaker_group_leader') == 'on' }}"
      sequence:
      - service: media_player.join
        data_template:
          group_members: "{{ [speaker] }}"
        target:
          entity_id: media_player.living_room_speaker

    - conditions:
      - condition: template
        value_template: "{{ speaker != 'media_player.kitchen_speaker' and states('binary_sensor.kitchen_speaker_group_leader') == 'on' }}"
      sequence:
      - service: media_player.join
        data_template:
          group_members: "{{ [speaker] }}"
        target:
          entity_id: media_player.kitchen_speaker

    - conditions:
      - condition: template
        value_template: "{{ speaker != 'media_player.bath_room_speaker' and states('binary_sensor.bath_room_speaker_group_leader') == 'on' }}"
      sequence:
      - service: media_player.join
        data_template:
          group_members: "{{ [speaker] }}"
        target:
          entity_id: media_player.bath_room_speaker

  mode: queued
