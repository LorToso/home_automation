send_vacuum_to_room:
  fields:
    rooms:
      description: "List of rooms to send the vacuum to"
    passes:
      description: "How often to repeat the cleaning of the room"
      example: 1
      default: 1

  alias: Send Vacuum to Room
  sequence:
    - if:
        - condition: template
          value_template: "{{ states('vacuum.roborock_s7') == 'docked' }}"
      then:
        - service: script.empty_list
          data:
            var_list: var.current_vacuumed_rooms
        - repeat:
            for_each: "{{ rooms }}"
            sequence:
              - service: script.add_to_list
                data_template:
                  item:
                    room: "{{ repeat.item }}"
                    passes: "{{ passes }}"
                  var_list: var.current_vacuumed_rooms
        - service: vacuum.send_command
          data_template:
            command: app_segment_clean
            params:
              - segments: |
                  {% set ns = namespace() %}
                  {% set ns.segments = [] %}
                  {% for room in rooms %}
                  {% set ns.segments = ns.segments + [{'bed_room': 25, 'toilet': 23,
                      'kitchen': 17, 'hallway': 21, 'bath_room': 24, 'office': 22, 'entrance': 19,
                      'living_room': 20, 'bar': 16, 'dining_room': 18}[room]] %}
                  {% endfor %}
                  {{ ns.segments }}
                repeat: "{{ passes }}"
          target:
            entity_id: vacuum.roborock_s7
        - delay:
            minutes: 1
        - wait_template: "{{ states('vacuum.roborock_s7') in ['docked', 'returning'] }}"
          continue_on_timeout: true
          timeout: "30"

        - if:
            - condition: template
              value_template: "{{ states('vacuum.roborock_s7') in ['docked', 'returning'] }}"
          then:
            - repeat:
                for_each: "{{ rooms }}"
                sequence:
                  - service: script.set_last_cleaned_time
                    data_template:
                      room: "{{ repeat.item }}"
                  - service: script.add_to_list
                    data_template:
                      item:
                        room: "{{ repeat.item }}"
                        passes: "{{ passes }}"
                      var_list: var.last_vacuumed_rooms
            - service: script.empty_list
              data:
                var_list: var.current_vacuumed_rooms
          else: []
  mode: queued

set_last_cleaned_time:
  fields:
    room:
      description: "Room"
      example: "kitchen"
  alias: Set last cleaned time in room
  sequence:
  - service: input_datetime.set_datetime
    data_template:
      entity_id: "input_datetime.{{room}}_last_vacuumed"
      datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"

add_to_cleaning_queue:
  fields:
    rooms:
      description: "List of rooms to send the vacuum to"
    passes:
      description: "How often to repeat the cleaning of the room"
      example: 1
      default: 1
  alias: Add to cleaning queue
  sequence:
    - repeat:
        for_each: "{{ rooms }}"
        sequence:
          - variables:
              item:
                room: "{{ repeat.item }}"
                passes: "{{ passes }}"
          - service: script.add_to_list
            data_template:
              var_list: "var.vacuum_queue"
              item: "{{ item }}"
    - condition: state
      entity_id: vacuum.roborock_s7
      state: docked
    - condition: state
      entity_id: var.queue_vacuum_running
      state: "false"
    - service: var.set
      data:
        entity_id: var.queue_vacuum_running
        value: "true"
    - repeat:
        while:
          - condition: template
            value_template: >
              {{states("var.vacuum_queue")|from_json|from_json|length > 0 and states("var.queue_vacuum_running") == "true" }}
        sequence:
          - condition: state
            entity_id: var.vacuum_stopping
            state: "false"
          - service: script.get_first_element_from_list
            data:
              var_list: var.vacuum_queue
            response_variable: first_element
          - variables:
              next_room: "{{ first_element['room'] }}"
              next_room_passes: "{{ first_element['passes'] }}"
          - service: script.send_vacuum_to_room
            data:
              rooms:
                - "{{ next_room }}"
              passes: "{{ next_room_passes }}"
          - if:
              - condition: template
                value_template: "{{ states('vacuum.roborock_s7') in ['docked', 'returning'] }}"
            then:
              - service: script.remove_first_from_list
                data:
                  var_list: var.vacuum_queue
            else:
              - service: script.empty_list
                data:
                  var_list: var.vacuum_queue
              - service: var.set
                data:
                  entity_id: var.queue_vacuum_running
                  value: "false"
    - service: script.empty_list
      data:
        var_list: var.vacuum_queue
    - service: var.set
      data:
        entity_id: var.queue_vacuum_running
        value: "false"
  mode: parallel

send_vacuum_to_dock:
  alias: Send vacuum to dock
  sequence:
    - service: var.set
      data:
        entity_id: var.queue_vacuum_running
        value: "false"
    - service: var.set
      data:
        entity_id: var.vacuum_stopping
        value: "true"
    - service: script.send_vacuum_to_dock
    - wait_template: "{{ states('vacuum.roborock_s7') in ['docked'] }}"
      continue_on_timeout: true
      timeout: "5"
    - service: var.set
      data:
        entity_id: var.vacuum_stopping
        value: "false"


send_vacuum_everywhere:
  alias: Send Vacuum Everywhere
  sequence:
    - service: script.add_to_cleaning_queue
      data:
        rooms:
          - bed_room
          - bar
          - entrance
          - kitchen
          - toilet
          - dining_room
          - living_room
          - hallway
          - bath_room
          - office

send_vacuum_to_dirty_rooms:
  alias: Send Vacuum To Dirty Rooms
  sequence:
    - service: script.add_to_cleaning_queue
      data_template:
        rooms: '{{ state_attr("sensor.rooms_that_need_to_be_vacuumed", "rooms") }}'