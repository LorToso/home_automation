generate_goodbye_ai:
  alias: Generate Goodbye text
  description: ""
  mode: single
  sequence:
    - service: conversation.process
      data:
        language: EN
        agent_id: f5473f5d0996f8f420405ee483c0302c
        text: |
          The user is leaving the house.
          {%- if states("binary_sensor.should_warn_about_open_windows") == "on" and states("binary_sensor.is_any_window_open") == "on"%}
          Remind the user to close the windows if any window is open. Explicitly mention all the rooms that have open windows.
          {%- endif %}
          {%- if states("sensor.total_rain_today")|int > 0 %}
          Based on the weather forecast, remind the user to take an umbrella. Do this by telling the user what time it is going to start raining.
          {%- endif %}
          {%- if states("input_boolean.trash_reminder") == "on" %}
          Remind the user to take down the trash.
          {%- endif %}
          {%- if states("person.lorenzo") != "home" %}
          Remind the user to pack their phone, wallet and keys.
          {%- endif %}
          Say goodbye in a encouraging way. Keep it to one or two sentence.
      response_variable: chatgpt_output
    - variables:
        text: '{{ chatgpt_output["response"]["speech"]["plain"]["speech"] }}'
    - action: var.set
      data:
        entity_id: var.goodbye_ai_cache
        value: '{{ text[:250] }}'
        attributes:
          text: '{{ text }}'

generate_welcome_ai:
  alias: Say welcome
  description: ""
  mode: single
  sequence:
    - action: todo.get_items
      target:
        entity_id:
          - todo.last_vacuumed_rooms
          - todo.current_vacuumed_rooms
      data:
        status: needs_action
      response_variable: room_lists
    - variables:
        last_vacuumed_rooms: '{{ room_lists["todo.last_vacuumed_rooms"]["items"]| map(attribute="summary")|list }}'
        current_vacuumed_rooms: '{{ room_lists["todo.current_vacuumed_rooms"]["items"]| map(attribute="summary")|list }}'
    - service: conversation.process
      data:
        language: EN
        agent_id: f5473f5d0996f8f420405ee483c0302c
        conversation_id: 01HZN5A3AE56FDKRNQ0CPJPXYW
        text: |
          The user is coming back home.
          Greet him in a nice welcoming way.
          {%- if states("todo.current_vacuumed_rooms")|int == 0 %}
            {%- if states("todo.last_vacuumed_rooms")|int > 0 %}
              {%- if states("todo.last_vacuumed_rooms")|int > 3 %}
              Say that {{ states("todo.last_vacuumed_rooms") }} rooms have been vacuumed while the user was gone
              {%- else %}
              Say that the following rooms have been vacuumed while the user was gone:
                {%- for room in last_vacuumed_rooms %}
                - {{- room.split("|")[0].replace("_", " ") }}
                {%- endfor %}
              {%- endif %}
            {%- endif %}
          {%- else %}
            Tell the user that the vacuum got stuck in the {{ current_vacuumed_rooms[0].split("|")[0].replace("_", " ") }}.
          {%- endif %}
          Keep it short. Keep it to less than 20 words.
          Make a reference to the time of day.
          Don't say what time it is, but rather use words like morning or evening.
          Don't mention that you are a smart home.
          Change it up a bit when I ask you multple times.
      response_variable: chatgpt_output
    - variables:
        text: '{{ chatgpt_output["response"]["speech"]["plain"]["speech"] }}'
    - action: var.set
      data:
        entity_id: var.welcome_home_ai_cache
        value: '{{ text[:250] }}'
        attributes:
          text: '{{ text }}'
