
- platform: random
  name: Random Sensor
  minimum: 1
  maximum: 5

- platform: systemmonitor
  resources:
    - type: processor_use
    - type: disk_use_percent
      arg: "/"
    - type: disk_free
      arg: "/"
    - type: memory_use_percent
    - type: network_in
      arg: eth0
    - type: throughput_network_in
      arg: eth0
    - type: network_out
      arg: eth0
    - type: throughput_network_out
      arg: eth0
    - type: processor_temperature
    - type: last_boot

- platform: command_line
  name: CPU Temp
  command: "cat /sys/class/thermal/thermal_zone0/temp"
  unit_of_measurement: "°C"
  value_template: '{{ value | multiply(0.001) | round(2)  }}'

- platform: filesize
  file_paths:
    - /config/home-assistant_v2.db

- platform: template
  sensors:
    living_room_temperature_rounded:
      friendly_name: "Living Room Temperature Rounded"
      unit_of_measurement: "°C"
      value_template: >-
        {{
          states('sensor.living_room_temperature')|float|round(1)
        }}
    living_room_air_freshness:
      friendly_name: "Living Room Air Freshness"
      unit_of_measurement: "h"
      value_template: >-
        {% if states("binary_sensor.is_living_room_air_fresh") == 'on' %}
          0
        {% else %}
          {{ ((now().timestamp() - states.binary_sensor.is_living_room_air_fresh.last_changed.timestamp())/3600)|int }}
        {% endif %}
    living_room_presence_timer:
      friendly_name: "Living Room Presence Timer"
      unit_of_measurement: "min"
      value_template: >-
        {{
          ((as_timestamp(state_attr("timer.living_room_presence", "finishes_at"), now().timestamp()) - now().timestamp())/60)|int
        }}

    bed_room_temperature_rounded:
      friendly_name: "Bed Room Temperature Rounded"
      unit_of_measurement: "°C"
      value_template: >-
        {{
          states('sensor.bed_room_temperature')|float|round(1)
        }}
    bed_room_air_freshness:
      friendly_name: "Bed Room Air Freshness"
      unit_of_measurement: "h"
      value_template: >-
        {% if states("binary_sensor.is_bed_room_air_fresh") == 'on' %}
          0
        {% else %}
          {{ ((now().timestamp() - states.binary_sensor.is_bed_room_air_fresh.last_changed.timestamp())/3600)|int }}
        {% endif %}
    bed_room_presence_timer:
      friendly_name: "Bed Room Presence Timer"
      unit_of_measurement: "min"
      value_template: >-
        {{
          ((as_timestamp(state_attr("timer.bed_room_presence", "finishes_at"), now().timestamp()) - now().timestamp())/60)|int
        }}

    bath_room_temperature_rounded:
      friendly_name: "Bath Room Temperature Rounded"
      unit_of_measurement: "°C"
      value_template: >-
        {{
          states('sensor.bath_room_temperature')|float|round(1)
        }}
    bath_room_air_freshness:
      friendly_name: "Bath Room Air Freshness"
      unit_of_measurement: "h"
      value_template: >-
        {% if states("binary_sensor.is_bath_room_air_fresh") == 'on' %}
          0
        {% else %}
          {{ ((now().timestamp() - states.binary_sensor.is_bath_room_air_fresh.last_changed.timestamp())/3600)|int }}
        {% endif %}
    bath_room_presence_timer:
      friendly_name: "Bath Room Presence Timer"
      unit_of_measurement: "min"
      value_template: >-
        {{
          ((as_timestamp(state_attr("timer.bath_room_presence", "finishes_at"), now().timestamp()) - now().timestamp())/60)|int
        }}

    office_temperature_rounded:
      friendly_name: "Office Temperature Rounded"
      unit_of_measurement: "°C"
      value_template: >-
        {{
          states('sensor.office_temperature')|float|round(1)
        }}
    office_air_freshness:
      friendly_name: "Office Air Freshness"
      unit_of_measurement: "h"
      value_template: >-
        {% if states("binary_sensor.is_office_air_fresh") == 'on' %}
          0
        {% else %}
          {{ ((now().timestamp() - states.binary_sensor.is_office_air_fresh.last_changed.timestamp())/3600)|int }}
        {% endif %}
    office_presence_timer:
      friendly_name: "Office Presence Timer"
      unit_of_measurement: "min"
      value_template: >-
        {{
          ((as_timestamp(state_attr("timer.office_presence", "finishes_at"), now().timestamp()) - now().timestamp())/60)|int
        }}

    dining_room_presence_timer:
      friendly_name: "Dining Room Presence Timer"
      unit_of_measurement: "min"
      value_template: >-
        {{
          ((as_timestamp(state_attr("timer.dining_room_presence", "finishes_at"), now().timestamp()) - now().timestamp())/60)|int
        }}

    kitchen_presence_timer:
      friendly_name: "Kitchen Presence Timer"
      unit_of_measurement: "min"
      value_template: >-
        {{
          ((as_timestamp(state_attr("timer.kitchen_presence", "finishes_at"), now().timestamp()) - now().timestamp())/60)|int
        }}

    toilet_presence_timer:
      friendly_name: "Toilet Presence Timer"
      unit_of_measurement: "min"
      value_template: >-
        {{
          ((as_timestamp(state_attr("timer.toilet_presence", "finishes_at"), now().timestamp()) - now().timestamp())/60)|int
        }}

    hallway_presence_timer:
      friendly_name: "Hallway Presence Timer"
      unit_of_measurement: "min"
      value_template: >-
        {{
          ((as_timestamp(state_attr("timer.hallway_presence", "finishes_at"), now().timestamp()) - now().timestamp())/60)|int
        }}

    bar_presence_timer:
      friendly_name: "Bar Presence Timer"
      unit_of_measurement: "min"
      value_template: >-
        {{
          ((as_timestamp(state_attr("timer.bar_presence", "finishes_at"), now().timestamp()) - now().timestamp())/60)|int
        }}

    entrance_presence_timer:
      friendly_name: "Entrance Presence Timer"
      unit_of_measurement: "min"
      value_template: >-
        {{
          ((as_timestamp(state_attr("timer.entrance_presence", "finishes_at"), now().timestamp()) - now().timestamp())/60)|int
        }}

    humidifier_fault_level:
      friendly_name: "Humidifier Fault Level"
      value_template: >-
        {{
          state_attr('humidifier.humidifier','humidifier.fault')
        }}

    is_it_dark:
      friendly_name: Is it dark
      icon_template: hass:theme-light-dark
      value_template: >-
        {%
          if states('input_boolean.darkness') == 'on'
        %}
          yes
        {%
        else
        %}
          no
        {%
        endif
        %}